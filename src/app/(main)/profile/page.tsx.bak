'use client';

import { useEffect, useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { ListOrdered, MapPin, User, Mail, LogOut, Medal, ShieldCheck, Sparkles, Settings } from "lucide-react";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";
import { getAuth, signOut } from "firebase/auth";
import { app } from "@/lib/firebase/firebase";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { motion } from "framer-motion";
import type { Seller } from "@/lib/types";
import { getSellerById } from "@/lib/firebase/firestore";
import { Loader } from "@/components/common/Loader";
import { mockSellers } from "@/lib/placeholder-data";

type UserRole = 'admin' | 'seller' | 'buyer' | null;

interface UserProfile {
  id: string;
  name: string;
  email: string;
  mobile?: string;
  address?: string;
  pan?: string;
  commissionRate?: number;
  status?: string;
  profilePicture: string;
}

export default function ProfilePage() {
  const router = useRouter();
  const { toast } = useToast();
  const auth = getAuth(app);
  
  const [userRole, setUserRole] = useState<UserRole>(null);
  const [userId, setUserId] = useState<string | null>(null);
  const [seller, setSeller] = useState<Seller | null>(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [profile, setProfile] = useState<UserProfile>({
    id: '',
    name: '',
    email: '',
    mobile: '',
    address: '',
    pan: '',
    commissionRate: 0,
    status: '',
    profilePicture: '',
  });

  useEffect(() => {
    const role = sessionStorage.getItem('userRole') as UserRole;
    const id = sessionStorage.getItem('userId');
    
    // Redirect to login if not logged in
    if (!role || !id) {
      router.push('/login/admin');
      return;
    }
    
    setUserRole(role);
    setUserId(id);

    if (role === 'seller' && id) {
      getSellerById(id).then(fetchedSeller => {
        if (fetchedSeller) {
          setSeller(fetchedSeller);
          setProfile({
            id: fetchedSeller.id,
            name: fetchedSeller.name,
            email: `${fetchedSeller.name.replace(/\s+/g, '').toLowerCase()}@loki.com`,
            mobile: fetchedSeller.mobile,
            address: fetchedSeller.location?.address || '',
            pan: fetchedSeller.pan,
            commissionRate: fetchedSeller.commissionRate,
            status: fetchedSeller.status,
            profilePicture: `https://picsum.photos/seed/${fetchedSeller.id}/200`,
          });
        }
        setLoading(false);
      });
    } else if (role === 'admin') {
      // Mock admin data
      const mockProfile: UserProfile = {
        id: 'admin_1',
        name: 'Admin User',
        email: 'admin@loki.com',
        profilePicture: 'https://picsum.photos/seed/avatarAdmin/200',
      };
      setProfile(mockProfile);
      setLoading(false);
    } else {
      // Mock buyer data
      const mockProfile: UserProfile = {
        id: 'buyer_1',
        name: 'Anjali Sharma',
        email: 'anjali.s@example.com',
        address: '123, Rose Villa, Mumbai, Maharashtra',
        profilePicture: 'https://picsum.photos/seed/user-anjali/200',
      };
      setProfile(mockProfile);
      setLoading(false);
    }
  }, [router]);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      if (typeof window !== 'undefined') {
        sessionStorage.clear();
      }
      router.push('/login/admin');
      toast({ title: 'Logged Out', description: 'You have been successfully logged out.' });
    } catch (error) {
      console.error("Logout error:", error);
      toast({ title: 'Logout Failed', description: 'Could not log you out. Please try again.', variant: 'destructive' });
    }
  };

  const handleEditProfile = () => {
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    // Reset profile to original values
    if (userRole === 'seller' && seller) {
      setProfile({
        id: seller.id,
        name: seller.name,
        email: `${seller.name.replace(/\s+/g, '').toLowerCase()}@loki.com`,
        mobile: seller.mobile,
        address: seller.location?.address || '',
        pan: seller.pan,
        commissionRate: seller.commissionRate,
        status: seller.status,
        profilePicture: `https://picsum.photos/seed/${seller.id}/200`,
      });
    } else if (userRole === 'admin') {
      setProfile({
        id: 'admin_1',
        name: 'Admin User',
        email: 'admin@loki.com',
        profilePicture: 'https://picsum.photos/seed/avatarAdmin/200',
      });
    } else {
      setProfile({
        id: 'buyer_1',
        name: 'Anjali Sharma',
        email: 'anjali.s@example.com',
        address: '123, Rose Villa, Mumbai, Maharashtra',
        profilePicture: 'https://picsum.photos/seed/user-anjali/200',
      });
    }
  };

  const handleSaveProfile = async () => {
    try {
      setIsSaving(true);
      // In a real app, this would save to your backend
      // For now, we'll just simulate an API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: 'Success',
        description: 'Profile updated successfully',
      });
      setIsEditing(false);
    } catch (error) {
      console.error('Error saving profile:', error);
      toast({
        title: 'Error',
        description: 'Failed to save profile',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setProfile(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleProfilePictureChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // In a real app, you would upload the file to your server
      // For now, we'll just create a local preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setProfile(prev => ({
          ...prev,
          profilePicture: e.target?.result as string,
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const badges = [
    { icon: Sparkles, title: 'First Purchase', description: 'Made your first order!' },
    { icon: Medal, title: 'Top Reviewer', description: 'Wrote 5 approved reviews' },
    { icon: ShieldCheck, title: 'Verified Buyer', description: 'Completed 3 successful orders' },
  ];

  if (loading) {
    return <Loader />;
  }

  // Not logged in - redirect to login
  if (!userRole || !userId) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <Card className="max-w-md w-full">
          <CardHeader>
            <CardTitle>Access Denied</CardTitle>
            <CardDescription>You need to be logged in to view this page.</CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground mb-4">
              Please log in to access your profile.
            </p>
          </CardContent>
          <CardFooter>
            <Button asChild className="w-full">
              <Link href="/login/admin">Login</Link>
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  // Admin Profile View
  if (userRole === 'admin') {
    return (
      <div className="px-4 sm:px-6 lg:px-8 py-12">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-6">
            <Avatar className="h-24 w-24">
              <AvatarImage src={profile.profilePicture} alt={profile.name} />
              <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <h1 className="text-3xl font-bold font-headline">{profile.name}</h1>
              <p className="text-muted-foreground">Administrator</p>
            </div>
          </div>
          {!isEditing && (
            <div className="flex gap-2">
              <Button onClick={handleEditProfile}>
                <Settings className="mr-2 h-4 w-4" /> Edit Profile
              </Button>
            </div>
          )}
        </div>

        {isEditing ? (
          <Card>
            <CardHeader>
              <CardTitle>Edit Admin Profile</CardTitle>
              <CardDescription>Update your admin profile information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Profile Picture */}
              <div className="flex flex-col items-center space-y-4">
                <Avatar className="w-24 h-24">
                  <AvatarImage src={profile.profilePicture} alt={profile.name} />
                  <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
                </Avatar>
                <div>
                  <Label htmlFor="profilePicture" className="cursor-pointer">
                    <Button variant="outline" size="sm" asChild>
                      <span>Change Picture</span>
                    </Button>
                    <input
                      id="profilePicture"
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleProfilePictureChange}
                    />
                  </Label>
                </div>
              </div>

              {/* Name */}
              <div className="space-y-2">
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  name="name"
                  value={profile.name}
                  onChange={handleInputChange}
                  placeholder="Enter your name"
                />
              </div>

              {/* Email */}
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={profile.email}
                  onChange={handleInputChange}
                  placeholder="Enter your email"
                />
              </div>
            </CardContent>
            <CardFooter className="flex justify-end gap-2">
              <Button variant="outline" onClick={handleCancelEdit} disabled={isSaving}>
                Cancel
              </Button>
              <Button onClick={handleSaveProfile} disabled={isSaving}>
                {isSaving ? 'Saving...' : 'Save Changes'}
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <Card>
            <CardHeader>
              <CardTitle>Admin Account</CardTitle>
              <CardDescription>Manage your account.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <User className="h-4 w-4 text-muted-foreground" />
                <span>{profile.name}</span>
              </div>
              <div className="flex items-center gap-3">
                <Mail className="h-4 w-4 text-muted-foreground" />
                <span>{profile.email}</span>
              </div>
              <Separator />
              <Button variant="destructive" onClick={handleLogout}>
                <LogOut className="mr-2" /> Logout
              </Button>
            </CardContent>
          </Card>
        )}
      </div>
    );
  }

  // Seller Profile View
  if (userRole === 'seller' && seller) {
    return (
      <div className="px-4 sm:px-6 lg:px-8 py-12">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-6">
            <Avatar className="h-24 w-24">
              <AvatarImage src={profile.profilePicture} alt={profile.name} />
              <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <h1 className="text-3xl font-bold font-headline">{profile.name}</h1>
              <p className="text-muted-foreground">{profile.mobile}</p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" asChild>
              <Link href={`/sellers/${seller.id}`}>View Public Profile</Link>
            </Button>
            {!isEditing && (
              <Button onClick={handleEditProfile}>
                <Settings className="mr-2 h-4 w-4" /> Edit Profile
              </Button>
            )}
          </div>
        </div>

        {isEditing ? (
          <Card>
            <CardHeader>
              <CardTitle>Edit Seller Profile</CardTitle>
              <CardDescription>Update your seller profile information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Profile Picture */}
              <div className="flex flex-col items-center space-y-4">
                <Avatar className="w-24 h-24">
                  <AvatarImage src={profile.profilePicture} alt={profile.name} />
                  <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
                </Avatar>
                <div>
                  <Label htmlFor="profilePicture" className="cursor-pointer">
                    <Button variant="outline" size="sm" asChild>
                      <span>Change Picture</span>
                    </Button>
                    <input
                      id="profilePicture"
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleProfilePictureChange}
                    />
                  </Label>
                </div>
              </div>

              {/* Business Name */}
              <div className="space-y-2">
                <Label htmlFor="name">Business Name</Label>
                <Input
                  id="name"
                  name="name"
                  value={profile.name}
                  onChange={handleInputChange}
                  placeholder="Enter your business name"
                />
              </div>

              {/* Email */}
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={profile.email}
                  onChange={handleInputChange}
                  placeholder="Enter your email"
                />
              </div>

              {/* Mobile */}
              <div className="space-y-2">
                <Label htmlFor="mobile">Mobile Number</Label>
                <Input
                  id="mobile"
                  name="mobile"
                  value={profile.mobile}
                  onChange={handleInputChange}
                  placeholder="Enter your mobile number"
                />
              </div>

              {/* PAN */}
              <div className="space-y-2">
                <Label htmlFor="pan">PAN Number</Label>
                <Input
                  id="pan"
                  name="pan"
                  value={profile.pan}
                  onChange={handleInputChange}
                  placeholder="Enter your PAN number"
                />
              </div>

              {/* Address */}
              <div className="space-y-2">
                <Label htmlFor="address">Business Address</Label>
                <Textarea
                  id="address"
                  name="address"
                  value={profile.address}
                  onChange={handleInputChange}
                  placeholder="Enter your business address"
                  rows={3}
                />
              </div>

              {/* Commission Rate (Read-only) */}
              <div className="space-y-2">
                <Label htmlFor="commissionRate">Commission Rate</Label>
                <Input
                  id="commissionRate"
                  name="commissionRate"
                  value={`${profile.commissionRate}%`}
                  disabled
                />
                <p className="text-xs text-muted-foreground">
                  Commission rate is set by admin
                </p>
              </div>

              {/* Status (Read-only) */}
              <div className="space-y-2">
                <Label htmlFor="status">Account Status</Label>
                <Input
                  id="status"
                  name="status"
                  value={profile.status?.charAt(0).toUpperCase() + profile.status?.slice(1)}
                  disabled
                />
              </div>
            </CardContent>
            <CardFooter className="flex justify-end gap-2">
              <Button variant="outline" onClick={handleCancelEdit} disabled={isSaving}>
                Cancel
              </Button>
              <Button onClick={handleSaveProfile} disabled={isSaving}>
                {isSaving ? 'Saving...' : 'Save Changes'}
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <div className="grid md:grid-cols-2 gap-8">
            <Card>
              <CardHeader>
                <CardTitle>Seller Information</CardTitle>
                <CardDescription>Your business details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-3">
                  <User className="h-4 w-4 text-muted-foreground" />
                  <span>{profile.name}</span>
                </div>
                <div className="flex items-center gap-3">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <span>{profile.email}</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-muted-foreground">Mobile:</span>
                  <span>{profile.mobile}</span>
                </div>
                <div className="flex items-start gap-3">
                  <MapPin className="h-4 w-4 text-muted-foreground mt-1" />
                  <span>{profile.address}</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-muted-foreground">PAN:</span>
                  <span>{profile.pan}</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-muted-foreground">Commission Rate:</span>
                  <span>{profile.commissionRate}%</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-muted-foreground">Status:</span>
                  <span className="capitalize">{profile.status}</span>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Seller Account</CardTitle>
                <CardDescription>Manage your account.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button variant="destructive" onClick={handleLogout}>
                  <LogOut className="mr-2" /> Logout
                </Button>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    );
  }

  // Buyer Profile View
  return (
    <div className="px-4 sm:px-6 lg:px-8 py-12">
      <motion.div 
        className="flex items-center gap-6 mb-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <motion.div
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Avatar className="h-24 w-24">
            <AvatarImage src={profile.profilePicture} alt={profile.name} />
            <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
          </Avatar>
        </motion.div>
        <div>
          <motion.h1 
            className="text-3xl font-bold font-headline"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            {profile.name}
          </motion.h1>
          <motion.p 
            className="text-muted-foreground"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            {profile.email}
          </motion.p>
        </div>
        {!isEditing && (
          <div className="ml-auto">
            <Button onClick={handleEditProfile}>
              <Settings className="mr-2 h-4 w-4" /> Edit Profile
            </Button>
          </div>
        )}
      </motion.div>

      {isEditing ? (
        <Card className="max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle>Edit Buyer Profile</CardTitle>
            <CardDescription>Update your profile information</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Profile Picture */}
            <div className="flex flex-col items-center space-y-4">
              <Avatar className="w-24 h-24">
                <AvatarImage src={profile.profilePicture} alt={profile.name} />
                <AvatarFallback>{profile.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <div>
                <Label htmlFor="profilePicture" className="cursor-pointer">
                  <Button variant="outline" size="sm" asChild>
                    <span>Change Picture</span>
                  </Button>
                  <input
                    id="profilePicture"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handleProfilePictureChange}
                  />
                </Label>
              </div>
            </div>

            {/* Name */}
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                name="name"
                value={profile.name}
                onChange={handleInputChange}
                placeholder="Enter your name"
              />
            </div>

            {/* Email */}
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                value={profile.email}
                onChange={handleInputChange}
                placeholder="Enter your email"
              />
            </div>

            {/* Address */}
            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <Textarea
                id="address"
                name="address"
                value={profile.address}
                onChange={handleInputChange}
                placeholder="Enter your address"
                rows={3}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-end gap-2">
            <Button variant="outline" onClick={handleCancelEdit} disabled={isSaving}>
              Cancel
            </Button>
            <Button onClick={handleSaveProfile} disabled={isSaving}>
              {isSaving ? 'Saving...' : 'Save Changes'}
            </Button>
          </CardFooter>
        </Card>
      ) : (
        <div className="grid md:grid-cols-3 gap-8">
          <motion.div 
            className="md:col-span-1"
            initial={{ opacity: 0, x: -30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            <Card>
              <CardHeader>
                <CardTitle>Account Details</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-sm">
                <motion.div 
                  className="flex items-center gap-3"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.5 }}
                >
                  <User className="h-4 w-4 text-muted-foreground" />
                  <span>{profile.name}</span>
                </motion.div>
                <motion.div 
                  className="flex items-center gap-3"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.6 }}
                >
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <span>{profile.email}</span>
                </motion.div>
                <motion.div 
                  className="flex items-start gap-3"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.7 }}
                >
                  <MapPin className="h-4 w-4 text-muted-foreground mt-1" />
                  <span>{profile.address}</span>
                </motion.div>
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.8 }}
                >
                  <Separator className="my-4"/>
                </motion.div>
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.9 }}
                >
                  <Button variant="outline" className="w-full" onClick={handleEditProfile}>Edit Profile</Button>
                </motion.div>
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 1.0 }}
                >
