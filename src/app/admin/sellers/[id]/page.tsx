
// This is an autogenerated file from Firebase Studio.
'use client';

import { notFound, useParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Check, Loader2, Phone, ShieldCheck, User, X } from 'lucide-react';
import Link from 'next/link';
import { getSellerById, updateSellerStatus } from '@/lib/firebase/firestore';
import type { Seller } from '@/lib/types';
import { useEffect, useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';

const statusVariant = {
  pending: 'secondary',
  approved: 'default',
  rejected: 'destructive',
  suspended: 'destructive',
} as const;

export default function SellerDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const sellerId = params.id as string;
  const [seller, setSeller] = useState<Seller | null>(null);
  const [loading, setLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    async function fetchSeller() {
      if (!sellerId) return;
      try {
        const fetchedSeller = await getSellerById(sellerId);
        if (!fetchedSeller) {
          notFound();
        } else {
          setSeller(fetchedSeller);
        }
      } catch (error) {
        console.error("Failed to fetch seller:", error);
        toast({ title: 'Error', description: 'Failed to fetch seller details.', variant: 'destructive' });
        notFound();
      } finally {
        setLoading(false);
      }
    }
    fetchSeller();
  }, [sellerId, toast]);

  const handleStatusChange = async (newStatus: Seller['status']) => {
    if (!seller) return;
    setIsUpdating(true);
    try {
      await updateSellerStatus(seller.id, newStatus);
      setSeller({ ...seller, status: newStatus });
      toast({
        title: 'Status Updated',
        description: `Seller has been ${newStatus}.`,
      });
      if(newStatus !== 'suspended') {
        router.push('/admin/sellers');
      }
    } catch (error) {
      console.error('Error updating seller status:', error);
      toast({
        title: 'Error',
        description: 'Failed to update seller status.',
        variant: 'destructive',
      });
    } finally {
      setIsUpdating(false);
    }
  };

  if (loading) {
    return <SellerDetailsSkeleton />;
  }
  
  if (!seller) {
    return null; // or a not found component
  }

  return (
    <div>
        <div className="mb-6">
            <Button asChild variant="outline" size="sm" className="mb-4">
                <Link href="/admin/sellers">
                    <ArrowLeft className="mr-2 h-4 w-4"/>
                    Back to Sellers
                </Link>
            </Button>
            <h1 className="text-3xl font-bold font-headline">Seller Details</h1>
        </div>
        <div className="grid gap-8 md:grid-cols-3">
            <div className="md:col-span-1">
                <Card>
                    <CardHeader className="items-center text-center">
                        <Avatar className="h-24 w-24 mb-4">
                            <AvatarImage src={`https://picsum.photos/seed/${seller.id}/200`} />
                            <AvatarFallback>{seller.name.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <CardTitle>{seller.name}</CardTitle>
                        <CardDescription>
                            <Badge variant={statusVariant[seller.status]}>
                                {seller.status.charAt(0).toUpperCase() + seller.status.slice(1)}
                            </Badge>
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="text-sm space-y-4">
                       <div className="flex items-center gap-3">
                            <User className="h-4 w-4 text-muted-foreground" />
                            <span>{seller.name}</span>
                       </div>
                       <div className="flex items-center gap-3">
                            <Phone className="h-4 w-4 text-muted-foreground" />
                            <span>{seller.mobile}</span>
                       </div>
                       <div className="flex items-center gap-3">
                            <ShieldCheck className="h-4 w-4 text-muted-foreground" />
                            <span>{seller.pan}</span>
                       </div>
                    </CardContent>
                </Card>
            </div>
            <div className="md:col-span-2">
                <Card>
                    <CardHeader>
                        <CardTitle>Actions</CardTitle>
                        <CardDescription>Manage this seller's account and status.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {seller.status === 'pending' && (
                             <div className="p-4 bg-secondary rounded-lg">
                                <h3 className="font-semibold">Approve Seller</h3>
                                <p className="text-sm text-muted-foreground mb-3">This will allow the seller to start listing products.</p>
                                <div className="flex gap-2">
                                     <Button size="sm" className="text-green-600 border-green-600 hover:bg-green-50 hover:text-green-700" variant="outline" onClick={() => handleStatusChange('approved')} disabled={isUpdating}>
                                        {isUpdating ? <Loader2 className="mr-1 h-4 w-4 animate-spin"/> : <Check className="h-4 w-4 mr-1"/>} Approve
                                    </Button>
                                    <Button size="sm" className="text-red-600 border-red-600 hover:bg-red-50 hover:text-red-700" variant="outline" onClick={() => handleStatusChange('rejected')} disabled={isUpdating}>
                                        {isUpdating ? <Loader2 className="mr-1 h-4 w-4 animate-spin"/> : <X className="h-4 w-4 mr-1"/>} Reject
                                    </Button>
                                </div>
                            </div>
                        )}
                        <div className="p-4 border rounded-lg">
                            <h3 className="font-semibold">Commission Rate</h3>
                            <p className="text-sm text-muted-foreground mb-3">Current rate is {seller.commissionRate ?? '15'}%.</p>
                            <Button size="sm" variant="outline" asChild>
                                <Link href="/admin/commissions">Change Rate</Link>
                            </Button>
                        </div>
                         <div className="p-4 border border-destructive/50 rounded-lg">
                            <h3 className="font-semibold text-destructive">Suspend Seller</h3>
                            <p className="text-sm text-muted-foreground mb-3">Temporarily disable this seller's account.</p>
                            <Button size="sm" variant="destructive" onClick={() => handleStatusChange('suspended')} disabled={isUpdating}>
                                {isUpdating ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : null}
                                Suspend
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    </div>
  );
}

const SellerDetailsSkeleton = () => (
    <div>
        <div className="mb-6">
            <Skeleton className="h-8 w-32 mb-4" />
            <Skeleton className="h-9 w-64" />
        </div>
        <div className="grid gap-8 md:grid-cols-3">
            <div className="md:col-span-1">
                <Card>
                    <CardHeader className="items-center text-center">
                        <Skeleton className="h-24 w-24 rounded-full mb-4" />
                        <Skeleton className="h-6 w-48" />
                        <Skeleton className="h-5 w-20 mt-2" />
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-full" />
                    </CardContent>
                </Card>
            </div>
            <div className="md:col-span-2">
                <Card>
                    <CardHeader>
                        <Skeleton className="h-6 w-32" />
                        <Skeleton className="h-4 w-4/5 mt-2" />
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-24 w-full" />
                        <Skeleton className="h-20 w-full" />
                        <Skeleton className="h-20 w-full" />
                    </CardContent>
                </Card>
            </div>
        </div>
    </div>
);
